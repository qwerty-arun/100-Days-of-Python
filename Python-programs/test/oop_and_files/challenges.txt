
## **1. Object-Oriented Programming (OOP)**

### **Easy**

* Create a `Rectangle` class with attributes `length` and `width`. Add methods to:

  * calculate area
  * calculate perimeter

* Write a `BankAccount` class with:

  * methods `deposit(amount)` and `withdraw(amount)`
  * attribute `balance`

---

### **Medium**

* Create a `Student` class that stores name, roll number, and marks in subjects.

  * Add a method to calculate total and average marks.
  * Add another method to check grade (A/B/C).

* Implement inheritance:

  * A `Vehicle` base class with attributes like `brand`, `year`.
  * Subclasses `Car` and `Bike` that add specific attributes (`doors`, `engine_cc`).
  * Override `__str__` method to display details.

---

### **Hard**

* Create an abstract class `Shape` with an abstract method `area()`.

  * Implement `Circle`, `Square`, and `Triangle` classes that inherit from it.
  * Store a list of shapes and calculate the sum of all areas.

* Design a small `Library Management System`:

  * Classes: `Book`, `Member`, `Library`.
  * Features: Add book, borrow book, return book, list available books.
  * Use OOP concepts: encapsulation, composition, and maybe class methods for tracking.

---

## **2. File Handling**

### **Easy**

* Write a program to read a text file and count the number of lines, words, and characters.
* Write a program to copy the contents of one file into another.

---

### **Medium**

* Write a program to read a CSV file containing student names and marks, and calculate average marks.
* Write a program to search for a specific word in a file and print the line numbers where it appears.

---

### **Hard**

* Implement a log system:

  * Every time your program runs, append the date, time, and a message into a `log.txt` file.

* Build a mini “Contact Book” that:

  * Saves contacts (`name, phone, email`) into a CSV file.
  * Can add, view, search, and delete contacts using file operations.

* Write a program that processes a large file (say 500MB+) **line by line** (without loading whole file into memory) and counts word frequencies.